const char OBJECTIVE_A[] = "Eteindre incendie";
const char OBJECTIVE_B[] = "Secourer victime";

object autoroute : MissionScript
{
	
	autoroute()
	{
	}
	
	~autoroute()
	{
	}
	
	void Start()
	{
		Mission::AddObjective(OBJECTIVE_A);
		Mission::SetObjectiveAccomplished(OBJECTIVE_A, false);
		Mission::AddObjective(OBJECTIVE_B);
		Mission::SetObjectiveAccomplished(OBJECTIVE_B, false);
	}
	
	MissionState GetMissionState()
	{
		if (Mission::GetCounter("Burning Objects") + Mission::GetCounter("Burning Houses") == 0)
		{
			if (!Mission::IsObjectiveAccomplished(OBJECTIVE_A))
				Mission::SetObjectiveAccomplished(OBJECTIVE_A, true);
		} 
		else
		{
			if (Mission::IsObjectiveAccomplished(OBJECTIVE_A))
				Mission::SetObjectiveAccomplished(OBJECTIVE_A, false);
		}
		if (Mission::GetCounter("Injured Persons") + Mission::GetCounter("Dead Persons") == 0)
		{
			if (!Mission::IsObjectiveAccomplished(OBJECTIVE_B))
				Mission::SetObjectiveAccomplished(OBJECTIVE_B, true);
		}
		else
		{
			if (Mission::IsObjectiveAccomplished(OBJECTIVE_B))
				Mission::SetObjectiveAccomplished(OBJECTIVE_B, false);
		}
		if (Mission::IsDefaultLogicPositive() && Mission::AllObjectivesAccomplished()) 
		{
			return MISSION_SUCCEEDED;
		}
		return MISSION_RUNNING;
	}
		const char *GetFailReason()
	{
		if (mTooManyVictims)
			return "TOO_MANY_VICTIMS_REASON";

		return "UNKNOWN";
	}

	const char *GetFailComment()
	{
		if (mTooManyVictims)
			return "TOO_MANY_VICTIMS_COMMENT";

		return "UNKNOWN";
	}
	
	const char *GetSuccessComment(Mission::MissionScoring *scoring)
	{
		if (scoring->Efficiency >= 0.7f)
			return "SUPERV_MISSION01_01";
		if (scoring->Efficiency < 0.7f)
			return "SUPERV_MISSION01_02";
		if (Mission::GetCounter("Burnt Objects") >= 10)
			return "SUPERV_MISSION01_03";
		return Mission::GetDefaultCommentForEfficiency(scoring->Efficiency);
	}
};
