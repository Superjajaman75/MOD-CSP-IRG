//******************************************************************************************
// #Version 2.5#
//
// 		Includes: All Motorcycle commands
//
//	- VcmdMotorcycleExit
//	- PcmdMotorcycleEnter
//
//		Script by Hoppah
//		customized by dnm
//		
//
//******************************************************************************************

const char CMD_ENTER_MOTORCYCLE[] 			= "PcmdMotorcycleEnter";
const char OBJ_MOTORCYCLEGN[]				= "mod:Prototypes/Vehicles/Police/BMW1200RT.e4p";
const char OBJ_MOTORCYCLEPN[]				= "mod:Prototypes/Vehicles/Police/BMW1200RTPN.e4p";
const char OBJ_MOTORCYCLEGN_DRIVER[]		= "mod:Prototypes/Persons/Police/Motard_GN.e4p";
const char OBJ_MOTORCYCLEPN_DRIVER[]		= "mod:Prototypes/Persons/Police/Motard_PN.e4p";
const char NAME_DRIVER[] 					= "driver";


int DummyGroup = 20;

object VcmdMotorcycleExit : CommandScript
{
	VcmdMotorcycleExit()
	{
		SetCursor("emptycar");
		SetIcon("emptycar");
		SetValidTargets(ACTOR_VEHICLE);
		SetRestrictions(RESTRICT_SELFEXECUTE);
		SetDoubleClickable(true);
		SetPriority(2000);
	}

 	bool CheckPossible(GameObject *Caller)
 	{
 		if (!Caller->IsValid())
 			return false;
 
 		if (Caller->GetType() == ACTOR_VEHICLE)
 			return true;
 
		return true;
 	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if (!Caller->IsValid() || !Target->IsValid() || (Caller->GetID() != Target->GetID()))
			return false;

		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		
		PersonList l1 = v.GetPassengers();
		Person p1 = l1.GetPerson(0);
		
		v.PushActionWait(ACTION_NEWLIST, 0.1f);
		Vector Pos = v.GetPosition();
		float r[9];
		float childr[9];
		v.GetRotation(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);
		
		if (StrCompare(v.GetPrototypeFileName(), OBJ_MOTORCYCLEGN) == 0)
			Person p = Game::CreatePerson(OBJ_MOTORCYCLEGN_DRIVER, Caller->GetName());
		else if (StrCompare(v.GetPrototypeFileName(), OBJ_MOTORCYCLEPN) == 0)
			Person p = Game::CreatePerson(OBJ_MOTORCYCLEPN_DRIVER, Caller->GetName());
		p.SetPlayerMP(v.GetPlayerMP());
		p.SetUpgradeLevel(3);
		float dx = 0.f, dy = 50.f, dz = 0.f;
		Math::RotateVector(dx, dy, dz, r);
		Math::EulerToMatrix(-90.0f, 0.f, 0.f, childr);
		Math::MultiplyMatrices(childr, r);
		Pos = Pos + Vector(dx, dy, 0);
		p.SetPosition(Pos);
		p.SetRotation(childr[0], childr[1], childr[2], childr[3], childr[4], childr[5], childr[6], childr[7], childr[8]);
		p.UpdatePlacement();
 		p.Hide();
		p.PushActionWait(ACTION_APPEND, 4.4f);
		p.PushActionShowHide(ACTION_APPEND, false);
		p.SetAnimation("helmopen");
		p.SetAnimation("idle");

		v.SetAnimation("getoff");
		v.PushActionWait(ACTION_APPEND, 4.4f);
 		v.PushActionExecuteCommand(ACTION_APPEND, "DummyFahrer",&v, 1, false);
		//v.RemoveCommand("MoveTo");
		v.RemoveCommand("GoHome");
		v.RemoveCommand("Positionnement");
		v.RemoveCommand("VcmdMotorcycleExit");
		v.RemovePassenger(&p1);
		p.Select();
		v.Deselect();
	}
};



object PcmdMotorcycleEnter : CommandScript
{
	PcmdMotorcycleEnter()
	{
		SetCursor("entercar");
		SetIcon("entercar");
		SetValidTargets(ACTOR_VEHICLE);
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int childID)
	{
		if(!Caller->IsValid() || !Target || !Target->IsValid() || Target->GetType()!=ACTOR_VEHICLE)
			return false;

		GameObjectList SelectPer = Game::GetSelectedGameObjects();
		if (SelectPer.GetNumObjects() > 1)
			return false;
		
		if(Caller->GetObjectType()==TYPE_PERSON)
		{
			Person p(Caller);
			Vehicle v(Target);

			if (v.IsDestroyed())
				return false;

			if(p.IsValid() && (p.IsLinkedWithPerson() || p.IsCarryingPerson() || p.IsEquipped() || p.IsPulling() || p.GetFirehoseID()!=0 || p.GetEnteredCarID() != -1)) 
				return false;

			if (p.IsCurrentAction("EActionTreatPerson"))
				return false;

			Vehicle v(Target);
			if (v.IsValid() && !v.IsDestroyed() &&  v.IsCurrentAnimation("Getoff") && ((StrCompare(p.GetPrototypeFileName(), OBJ_MOTORCYCLEGN_DRIVER) == 0) && (StrCompare(v.GetPrototypeFileName(), OBJ_MOTORCYCLEGN) == 0)) || ((StrCompare(p.GetPrototypeFileName(), OBJ_MOTORCYCLEPN_DRIVER) == 0) && (StrCompare(v.GetPrototypeFileName(), OBJ_MOTORCYCLEPN) == 0)))
 			{
				SetPriority(2000);
				return true;
			}
			return false;
		}
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Person p(Caller);
		if (childID == 0)
		{
			Vector TargetPos = Target->GetTargetPoint(Caller, TARGET_PASSENGERDOOR);
			p.PushActionMove(ACTION_NEWLIST, TargetPos);
			p.PushActionTurnTo(ACTION_APPEND, Target);
			p.PushActionExecuteCommand(ACTION_APPEND, CMD_ENTER_MOTORCYCLE, Target, 1, false);
			p.PushActionDeleteOwner(ACTION_APPEND);
		}
		if (childID == 1)
		{
			Vehicle v(Target);
			v.SetChildEnabled(NAME_DRIVER, true);
			v.SetAnimation("geton");
			//v.AssignCommand("MoveTo");
			v.AssignCommand("GoHome");
			v.AssignCommand("VcmdMotorcycleExit");
			v.AssignCommand("Positionnement");
			v.Select();
			if (StrCompare(p.GetPrototypeFileName(), OBJ_MOTORCYCLEGN_DRIVER) == 0)
				Person p1 = Game::CreatePerson(OBJ_MOTORCYCLEGN_DRIVER, Caller->GetName());
			else if (StrCompare(p.GetPrototypeFileName(), OBJ_MOTORCYCLEPN_DRIVER) == 0)
				Person p1 = Game::CreatePerson(OBJ_MOTORCYCLEPN_DRIVER, Caller->GetName());
			p1.SetPlayerMP(v.GetPlayerMP());
			v.AddPassenger(&p1);
			p.Deselect();
		}
  	}
};

object DummyFahrer : CommandScript
{
	DummyFahrer()
	{
		SetGroupID(DummyGroup);
	}

	bool CheckPossible(GameObject *Caller)
	{
		return true;
	}

	bool CheckTarget(GameObject *Caller, Actor *Target, int ChildID)
	{
		return true;
	}

	void PushActions(GameObject *Caller, Actor *Target, int childID)
	{
		Vehicle v(Caller);
		if(childID == 1)
		{
			v.SetChildEnabled(NAME_DRIVER, false);
		}
			        
	}
};